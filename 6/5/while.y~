%{
	#include <stdio.h>
	#include <ctype.h>
	#include "lex.yy.c"
	int yylex();
	int yyerror();
	int main();
	int push();
	int lab1();
	int lab2();
	int lab3();
	int codegen();
	int codegen_assign();	
%}
%union{
	int ival;
};
%token NUMBER ID WHILE
%right '='
%left  '+' '-'
%left  '*' '/'
%%

S	:	WHILE {lab1();} '(' E ')' {lab2();} E ';' {lab3();}
	;

E	:	V '=' {push();} E {codegen_assign();}
	|	E '+' {push();} E {codegen();}
	|	E '-' {push();} E {codegen();}
	|	E '*' {push();} E {codegen();}
	|	E '/' {push();} E {codegen();}
	|	'(' E ')'
	|	V
	| NUMBER {push();}
	;

V	:	ID {push();}
	;
%%


char stack[100][10];
int top = 0, start = 1, lnum = 1;
char _id[2] = "0", temp[3] = "t";

int main()
{
	printf("Enter the expression : \n");
	yyparse();
	return 0;
}
void yyerror(char *s)
{
	fprintf("%s\n", s);
}
int push()
{
	strcpy(stack[++top], yytext);
}

int codegen()
{
	strcpy(temp, "t");
	strcat(temp, _id);
	printf("%s = %s %s %s\n", temp, stack[top-2], stack[top-1], stack[top]);
	top-=2;
	strcpy(stack[top], temp);
	_id[0]++;
}
int codegen_assign()
{
	printf("%s = %s \n", stack[top-2], stack[top]);
	top-=2;
}

int lab1()
{
	printf("L%d : \n",lnum);
	lnum++;
}

int lab2()
{
	strcpy(temp, "t");
	strcat(temp, _id);
	printf("%s = not %s\n", temp, stack[top]);
	printf("if %s goto L%d \n", temp, lnum);
	_id[0]++;
}

int lab3()
{
	printf("goto L%d \n",start);
	printf("L%d : \n", lnum);
}

